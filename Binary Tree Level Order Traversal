/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
//  BFS uses queue


public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if (root == null){
            return list;
        }
        queue.offer(root);
        int level = 0;
        while (!queue.isEmpty()){
            List<Integer> sublist = new ArrayList<Integer>();
            level = queue.size();
            for (int i = 0; i < level; i++){
                TreeNode temp = queue.poll();
                sublist.add(temp.val);
                if (temp.left != null){
                    queue.offer(temp.left);
                }
                if (temp.right != null){
                    queue.offer(temp.right);
                }
            }
            list.add(sublist);
        }
        return list;
    }
}
